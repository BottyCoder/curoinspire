# ──────────────────────────────────────────────────────────────
#  Curo-Inspire • Add /api/project-analysis  (read-only code map)
# ──────────────────────────────────────────────────────────────
# GOAL: Expose the current project structure + file contents
#       in JSON for AI analysis, while blocking everyone else
#       via a bearer token header.  NO other behaviour changes.
#
#         GET /api/project-analysis
#         Header:  x-analysis-token: <secret>
#         ↳  {
#               "generatedAt": "2025-06-26T10:00:12Z",
#               "files": [ { "path": "server.js", "content": "..." }, … ]
#             }
#
#   Excludes node_modules, .git, .cache, uploads, tokens.json
#   Skips any file >1 MB for safety.
# ──────────────────────────────────────────────────────────────

## 1.  Add route file
#    routes/projectAnalysis.js
write_file routes/projectAnalysis.js <<'JS'
const express = require('express');
const router  = express.Router();
const fs      = require('fs').promises;
const path    = require('path');

const ROOT     = path.resolve(__dirname, '..');
const EXCLUDE  = ['node_modules', '.git', '.cache', 'uploads', 'tokens.json'];
const MAX_SIZE = 1_000_000; // 1 MB

async function walk(dir) {
  const dirents = await fs.readdir(dir, { withFileTypes: true });
  const out = [];
  for (const dirent of dirents) {
    const abs = path.join(dir, dirent.name);
    const rel = path.relative(ROOT, abs);

    // skip unwanted folders / files
    if (EXCLUDE.some(e => rel.split(path.sep).includes(e))) continue;

    if (dirent.isDirectory()) {
      out.push(...await walk(abs));
    } else {
      const { size } = await fs.stat(abs);
      if (size > MAX_SIZE) continue;
      const content = await fs.readFile(abs, 'utf8');
      out.push({ path: rel, content });
    }
  }
  return out;
}

router.get('/api/project-analysis', async (req, res) => {
  try {
    if (req.headers['x-analysis-token'] !== process.env.ANALYSIS_TOKEN) {
      return res.status(401).json({ error: 'Unauthorized' });
    }
    const files = await walk(ROOT);
    res.json({ generatedAt: new Date().toISOString(), files });
  } catch (err) {
    console.error('analysis route error:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

module.exports = router;
JS

## 2.  Wire the route into the app
#    server.js  (add just one line)
apply_patch server.js <<'PATCH'
@@
 const express = require('express');
 const app     = express();
+app.use(require('./routes/projectAnalysis'));   // ← new analysis endpoint
@@
 PATCH

## 3.  Secret token (Replit Secrets tab)
#    Key:  ANALYSIS_TOKEN
#    Val:  choose-a-long-random-string

## 4.  Restart & test
npm run dev &
sleep 5     # wait for boot
curl -I $REPLIT_URL/api/project-analysis            # expect 401
curl -H "x-analysis-token: choose-a-long-random-string" \
     $REPLIT_URL/api/project-analysis | head -n 20  # expect JSON

## 5.  Commit
git add routes/projectAnalysis.js server.js
git commit -m "feat: add secure /api/project-analysis endpoint"
git push origin main

# ── All done.  No further edits.  Provide console output to confirm boot + first 20 lines of JSON. ──
